imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: service/voter.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%env(secret)%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: snc_redis.session.handler
    fragments: ~
    cache:
        pools:
            cache.profile:
                adapter: cache.adapter.filesystem
                default_lifetime: 300
            cache.keycloak:
                adapter: cache.adapter.filesystem
                default_lifetime: 300
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    cache: false
    paths:
        "%kernel.root_dir%/../web": web_dir

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_pgsql
        host: '%env(database_host)%'
        port: '%env(database_port)%'
        dbname: '%env(database_name)%'
        user: '%env(database_user)%'
        password: '%env(database_password)%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

light_saml_symfony_bridge:
    own:
        entity_id: "%env(entity_id)%"
        credentials:
            -
                certificate: "%env(sp_certificate_crt)%"
                key:         "%env(sp_certificate_pem)%"
                password:    ~
    party:
        idp:
            files:
                - "%env(sp_metadata)%"
    store:
        id_state: id_store  # name of id store service created in step 6
        
nasajon_login:
    permission_format: ~
    permission_type: grupo
    diretorio_sistema_id: '%env(diretorio_sistema_id)%'
    pg_semprovisao: redirect_nasajon
    cache: 
        keycloak: 'cache.keycloak'
        profile: 'cache.profile'
    keycloak:
        realm: "%env(keycloak_realm)%"
        client_id: "%env(keycloak_client_id)%"
        server_url: "%env(keycloak_url)%"

aws:
    version: 2.0
    region: '%env(amazon_region)%'
    credentials:
        key: '%env(amazon_key)%'
        secret: '%env(amazon_secret)%'
    S3:
        version: '2006-03-01'
    CloudWatchLogs:
        version: '2014-03-28'
    
snc_redis:
    clients:
        noticia:
            type: predis
            alias: noticia
            dsn: "%env(redis_dsn)%"
            logging: false
            options:
                prefix: noticia_
        session:
            type: predis
            alias: session
            dsn: "%env(redis_dsn)%"
            logging: false
    session:
        client: session
    
knp_gaufrette:
    adapters:
        imagens:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%env(amazon_s3_bucket_name)%'
                detect_content_type: false
                options:
                    directory: '%imagens_adapter_path%'
                    acl: 'public-read'
            
        informes:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%env(amazon_s3_bucket_name)%'
                detect_content_type: false
                options:
                    directory: '%informes_adapter_path%'
                    acl: 'public-read'
            
        recibospagamentos:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%env(amazon_s3_bucket_name)%'
                detect_content_type: false
                options:
                    directory: '%recibospagamentos_adapter_path%'
                    acl: 'public-read'

        solicitacoesdocumentos:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%env(amazon_s3_bucket_name)%'
                detect_content_type: false
                options:
                    directory: '%solicitacoesdocumentos_adapter_path%'
                    acl: 'public-read'
            
    filesystems:
        imagens:
            adapter: imagens

        informes:
            adapter: informes

        recibospagamentos:
            adapter: recibospagamentos
            
oneup_uploader:
    twig:                 true
    mappings:
        imagens:
            frontend: dropzone
            storage:
                type: gaufrette
                filesystem: gaufrette.imagens_filesystem
            enable_progress:      true

ekreative_health_check:
      doctrine:
          - 'default'
      redis:
          - 'snc_redis.session'
