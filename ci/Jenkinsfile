node('aws-codebuild') {

    stage('Clean') {
        deleteDir()
    }

    stage('Fetch') {
        timeout(time: 60, unit: 'SECONDS') {
            checkout scm
        }
    }

    def PLAYBOOK = "/opt/devops/Ansible/ci.yml"
    
    stage('Environment Config') {
        sh "auto_config"
    }

    stage('Config'){
        sh 'mkdir app/logs'
        sh 'touch app/logs/test.log'
        sh 'cp app/config/parameters.yml.dist app/config/parameters.yml'
        sh 'cp common.env.dist common.env'
    }

    stage('Composer-dev'){
        docker.image("nasajon/composer:1.7.2").inside("-v /root/.ssh:/root/.ssh") {
            sh 'composer install --prefer-dist --optimize-autoloader --no-scripts --ignore-platform-reqs'
        }
    }

    stage('MDA') {
        docker.image('nasajon/php-node').inside("-v /root/.ssh:/root/.ssh -e NODE_ENV=production -e SYMFONY_DEPRECATIONS_HELPER=disabled") {
            sh 'php vendor/nasajon/mdatransformer/bin/transformer nasajon:mda:builder --nocache'
        }
    }

    stage('Tests') {
        docker.image('postgres:11.5').withRun('-e "POSTGRES_DB=integratto2" -e "POSTGRES_USER=postgres"') { c ->
            docker.image('postgres:11.5').inside("--link ${c.id}:postgres -e POSTGRES_DB=integratto2 -e POSTGRES_USER=postgres -e PGPASSWORD=postgres") {
                sh "bash $WORKSPACE/vendor/nasajon/bancosweb/run_dump $WORKSPACE/vendor/nasajon/bancosweb/dump"
            }
            docker.image('nasajon/php:7.1-fpm-symfony-dev').inside("--link ${c.id}:postgres --env-file $WORKSPACE/common.env -e SYMFONY_DEPRECATIONS_HELPER=disabled -e sp_metadata=vendor/nasajon/login-bundle/Nasajon/LoginBundle/Resources/idp-FederationMetadata.xml -e sp_certificate_crt=vendor/nasajon/login-bundle/Nasajon/LoginBundle/Resources/server.crt -e sp_certificate_pem=vendor/nasajon/login-bundle/Nasajon/LoginBundle/Resources/server.pem") {
                sh 'bin/console doctrine:migrations:migrate --no-interaction'
                sh 'vendor/codeception/codeception/codecept run --fail-fast --no-colors --xml'
            }
        }

        parallel (
                "PHPCodeSniffer": {
                    sh 'docker run --rm -v $(pwd):/app -w /app phpstan/phpstan:latest phpcs --report=checkstyle --report-file=build/logs/checkstyle.xml --standard=PSR2 --encoding=UTF-8 --ignore="*.js" src/  || exit 0'
                    replaceFilePath('build/logs/checkstyle.xml')
                    checkstyle pattern: 'build/logs/checkstyle.xml'
                },

                "PHPStan": {
                    sh 'docker run --rm -v $(pwd):/app -w /app phpstan/phpstan:latest phpstan analyse src/ || exit 0'
                },

                "PhpMetrics": {
                    sh 'docker run --rm -v $(pwd):/app -w /app phpstan/phpstan:latest phpmetrics --report-html=build/logs/phpmetrics.html src/ || exit 0'
                    publishHTMLReport('build/logs', 'phpmetrics.html', 'PHPMetrics')
                },

                "PHPMessDetector": {
                    sh 'docker run --rm -v $(pwd):/app -w /app phpstan/phpstan:latest phpmd src/ xml cleancode,codesize,unusedcode --reportfile build/logs/pmd.xml || exit 0'
                    replaceFilePath('build/logs/pmd.xml')
                    pmd canRunOnFailed: true, pattern: 'build/logs/pmd.xml'
                },

                "PHPMagicNumberDetector": {
                    sh 'docker run --rm -v $(pwd):/app -w /app phpstan/phpstan:latest phpmnd src/ --exclude=tests --progress --non-zero-exit-on-violation --ignore-strings=return,condition,switch_case,default_parameter,operation || exit 0'
                },

                "PHPCopyPasteDetector": {
                    sh 'docker run --rm -v $(pwd):/app -w /app phpstan/phpstan:latest phpcpd --log-pmd build/logs/pmd-cpd.xml src/ || exit 0'
                    replaceFilePath('build/logs/pmd-cpd.xml')
                    dry canRunOnFailed: true, pattern: 'build/logs/pmd-cpd.xml'
                }
        )
        
    }
     

    stage('Composer'){
        docker.image("nasajon/composer:1.7.2").inside("-v /root/.ssh:/root/.ssh") {
            sh 'composer install --prefer-dist --optimize-autoloader --no-scripts --no-dev --ignore-platform-reqs'
        }
    }

    if (env.BRANCH_NAME == 'development') {
        stage('Deploy Dev'){
            sh "ansible-playbook ${PLAYBOOK} -e 'build_path=${WORKSPACE} env=dev'"
        }
    }
    else if (env.BRANCH_NAME == 'master') {
        stage('Deploy QA'){
            sh "ansible-playbook ${PLAYBOOK} -e 'build_path=${WORKSPACE} env=qa'"
        }
    }
    else if (env.BRANCH_NAME == 'production') {
        stage('Pipeline Prod'){
            sh "ansible-playbook ${PLAYBOOK} -e 'build_path=${WORKSPACE} env=prod'"
        }
    }
    else {
        stage('Build Docker Image'){
            sh "ansible-playbook ${PLAYBOOK} -e 'build_path=${WORKSPACE} env=test'"
        }
    }
    
}
