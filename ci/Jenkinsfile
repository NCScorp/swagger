node('aws-codebuild') {

    stage('Clean') {
        deleteDir()
    }

    stage('Fetch') {
        timeout(time: 60, unit: 'SECONDS') {
            checkout scm
        }
    }

    def PLAYBOOK = "/opt/devops/Ansible/ci.yml"
    
    stage('Environment Config') {
        sh "auto_config"
    }

    stage('Config'){
        sh 'mkdir app/logs'
        sh 'touch app/logs/test.log'
        sh 'cp app/config/parameters.yml.dist app/config/parameters.yml'
        sh 'cp common.env.dist common.env'
        sh 'rm -rf build/logs'  
        sh 'mkdir -p build/logs'
    }

    stage('Composer-dev'){
        docker.image("nasajon/composer:1.7.2").inside("-v /root/.ssh:/root/.ssh") {
            sh 'composer install --prefer-dist --optimize-autoloader --no-scripts --ignore-platform-reqs'
        }
            docker.image("jakzal/phpqa").inside("-v /root/.ssh:/root/.ssh") {
                
            
            }   
        parallel (
            "PHPCodeSniffer": {
                sh 'docker run --rm -v $(pwd):/project -w /project jakzal/phpqa phpcs --report=checkstyle --report-file=build/logs/checkstyle.xml --standard=PSR2 --encoding=UTF-8 --ignore="*.js" src/  || exit 0'
                replaceFilePath('build/logs/checkstyle.xml')
                checkstyle pattern: 'build/logs/checkstyle.xml'
            },

            "PHPStan": {
                sh 'docker run --rm -v $(pwd):/project -w /project jakzal/phpqa phpstan analyse src/ || exit 0'
            },

            "PhpMetrics": {
                sh 'docker run --rm -v $(pwd):/project -w /project jakzal/phpqa phpmetrics --report-html=build/logs/phpmetrics.html src/ || exit 0'
                publishHTMLReport('build/logs', 'phpmetrics.html', 'PHPMetrics')
            },

            "PHPMessDetector": {
                sh 'docker run --rm -v $(pwd):/project -w /project jakzal/phpqa phpmd src/ xml cleancode,codesize,unusedcode --reportfile build/logs/pmd.xml || exit 0'
                replaceFilePath('build/logs/pmd.xml')
                pmd canRunOnFailed: true, pattern: 'build/logs/pmd.xml'
            },

            "PHPMagicNumberDetector": {
                sh 'docker run --rm -v $(pwd):/project -w /project jakzal/phpqa phpmnd src/ --exclude=tests --progress --non-zero-exit-on-violation --ignore-strings=return,condition,switch_case,default_parameter,operation || exit 0'
            },

            "PHPCopyPasteDetector": {
                sh 'docker run --rm -v $(pwd):/project -w /project jakzal/phpqa phpcpd --log-pmd build/logs/pmd-cpd.xml src/ || exit 0'
                replaceFilePath('build/logs/pmd-cpd.xml')
                dry canRunOnFailed: true, pattern: 'build/logs/pmd-cpd.xml'
            }

            
        )

        stage('zip') {
            steps{
               sh 'apt-get install zip'
               sh 'zip -r teste.zip build/logs/'
            }        
            emailext(
                to: "thiagobento@nasajon.com.br",
                subject: "teste1: '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                attachmentsPattern: 'teste.zip',
                body: "Build Publicado em QA: '${env.JOB_NAME} [${env.BUILD_NUMBER}]' - Alterações: '${env.BUILD_URL}/changes'"
            )      
        }       
 

    }
      
}
def replaceFilePath(filePath) {
    sh "sed -i 's#/project/#${workspace}/#g' ${filePath}"
}

def publishHTMLReport(reportDir, file, reportName) {
    if (fileExists("${reportDir}/${file}")) {
        publishHTML(target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : reportDir,
            reportFiles          : file,
            reportName           : reportName
        ])
        )  
    }
    

    
}



echo "Passoou"
