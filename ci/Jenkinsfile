node('aws-codebuild') {

    stage('Fetch') {
        timeout(time: 60, unit: 'SECONDS') {
            checkout scm
        }
    }

    def PLAYBOOK = "/opt/devops/Ansible/ci.yml"
    
    stage('Environment Config') {
        sh "auto_config"
    }
    
    stage('Config'){
        sh 'mkdir app/logs'
        sh 'touch app/logs/test.log'
        sh 'cp app/config/parameters.docker.dist app/config/parameters.yml'
        sh 'cp common.env.dist common.env'
        //sh "sed -i -e 's/assets_version:/assets_version: v${buildName}/g' app/config/parameters.docker.dist"
    }

    stage('Composer With Dev Dependencies'){
        docker.image("nasajon/composer:1.7.2").inside("-v /root/.ssh:/root/.ssh") {
            sh 'composer install --prefer-dist --optimize-autoloader --no-scripts --ignore-platform-reqs'
        }
    }

    stage('NodeDeps') {
        docker.image("nasajon/yarn:1.9.4").inside("-v /root/.ssh:/root/.ssh") {
            sh 'yarn install'
        }
    }
        
    stage('Build') {
        docker.image('nasajon/php-node').inside("-v /root/.ssh:/root/.ssh -e NODE_ENV=production") {
            sh 'php vendor/nasajon/mdatransformer/bin/convert nasajon:mda:builder --nocache -vvv'
            sh 'php app/console assets:install --env=prod'
            sh 'php app/console assetic:dump --env=prod'
        }
    }


    stage('Tests') {
        docker.image('postgres:11.5').withRun('-e "POSTGRES_DB=integratto2" -e "POSTGRES_USER=bancosweb"') { c ->
            docker.image('postgres:11.5').inside("--link ${c.id}:postgres -e POSTGRES_DB=integratto2 -e POSTGRES_USER=bancosweb -e PGPASSWORD=mysecretpassword") {
                sh "bash $WORKSPACE/vendor/nasajon/bancosweb/run_dump $WORKSPACE/vendor/nasajon/bancosweb/dump"
            }
            docker.image('nasajon/php:7.1-fpm-symfony-dev').inside("--link ${c.id}:postgres --env-file $WORKSPACE/common.env -e SYMFONY_DEPRECATIONS_HELPER=disabled -e sp_metadata=vendor/nasajon/login-bundle/Nasajon/LoginBundle/Resources/idp-FederationMetadata.xml -e sp_certificate_crt=vendor/nasajon/login-bundle/Nasajon/LoginBundle/Resources/server.crt -e sp_certificate_pem=vendor/nasajon/login-bundle/Nasajon/LoginBundle/Resources/server.pem") {
                sh 'app/console doctrine:migrations:migrate --no-interaction'
                sh 'vendor/codeception/codeception/codecept run --fail-fast --no-colors --xml'
            }
        }
    }
    
    stage('Composer Without Dev Dependencies'){
        docker.image("nasajon/composer:1.7.2").inside("-v /root/.ssh:/root/.ssh") {
            sh 'composer install --prefer-dist --optimize-autoloader --no-dev --no-scripts --ignore-platform-reqs'
        }
    }

    if (env.BRANCH_NAME == 'development') {
        stage('SonarQube analysis') {
            def scannerHome = tool 'SonarQube';
            withSonarQubeEnv('Sonar') {
                sh "${scannerHome}/bin/sonar-scanner"
            }
	    }

        stage('Deploy Dev'){
            sh "ansible-playbook ${PLAYBOOK} -e 'build_path=${WORKSPACE} env=dev'"
        }
    }
    else if (env.BRANCH_NAME == 'master') {
        stage('SonarQube analysis') {
            def scannerHome = tool 'SonarQube';
            withSonarQubeEnv('Sonar') {
                sh "${scannerHome}/bin/sonar-scanner"
            }
	    }

        stage('Deploy QA'){
            sh "ansible-playbook ${PLAYBOOK} -e 'build_path=${WORKSPACE} env=qa'"
        }
    }
    else if (env.BRANCH_NAME == 'production') {
        stage('SonarQube analysis') {
            def scannerHome = tool 'SonarQube';
            withSonarQubeEnv('Sonar') {
                sh "${scannerHome}/bin/sonar-scanner"
            }
	    }

        stage('Pipeline Prod'){
            sh "ansible-playbook ${PLAYBOOK} -e 'build_path=${WORKSPACE} env=prod'"
        }
    }
    else {
        stage('Build Docker Image'){
            sh "ansible-playbook ${PLAYBOOK} -e 'build_path=${WORKSPACE} env=test'"
        }
    }

}

